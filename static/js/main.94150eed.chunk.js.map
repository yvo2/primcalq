{"version":3,"sources":["Year.js","App.js","serviceWorker.js","index.js"],"names":["Year","_this","this","react_default","a","createElement","className","props","id","onChange","e","target","value","onClick","onRemove","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","years","addYear","bind","assertThisInitialized","removeYear","updateYear","next","length","setState","toConsumableArray","concat","filter","year","before","parseInt","isNaN","_this2","sort","b","map","src_Year","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAceA,mLAXF,IAAAC,EAAAC,KACL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACVJ,KAAKK,MAAMC,GAAK,EADrB,UAC+B,IAC3BL,EAAAC,EAAAC,cAAA,SAAOI,SAAU,SAAAC,GAAC,OAAIT,EAAKM,MAAME,SAASR,EAAKM,MAAMC,GAAIE,EAAEC,OAAOC,QAAQA,MAAOV,KAAKK,MAAMK,QAC5FT,EAAAC,EAAAC,cAAA,UAAQQ,QAAS,kBAAMZ,EAAKM,MAAMO,SAASb,EAAKM,MAAMC,MAAtD,aANGO,aC+EJC,qBA1EX,SAAAA,EAAYT,GAAO,IAAAN,EAAA,OAAAgB,OAAAC,EAAA,EAAAD,CAAAf,KAAAc,IACff,EAAAgB,OAAAE,EAAA,EAAAF,CAAAf,KAAAe,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAnB,KAAMK,KAEDe,MAAQ,CACTC,MAAO,CAAC,CACJX,MAAO,EACPJ,GAAI,KAIZP,EAAKuB,QAAUvB,EAAKuB,QAAQC,KAAbR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAhB,KACfA,EAAK0B,WAAa1B,EAAK0B,WAAWF,KAAhBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAhB,KAClBA,EAAK2B,WAAa3B,EAAK2B,WAAWH,KAAhBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAhB,KAZHA,yEAgBf,IAAM4B,EAAO,CACTjB,MAAO,EACPJ,GAAIN,KAAKoB,MAAMC,MAAMrB,KAAKoB,MAAMC,MAAMO,OAAS,GAAGtB,GAAK,GAG3DN,KAAK6B,SAAS,CACVR,MAAMN,OAAAe,EAAA,EAAAf,CAAKf,KAAKoB,MAAMC,OAAjBU,OAAA,CAAwBJ,yCAI1BrB,GACPN,KAAK6B,SAAS,CACVR,MAAOrB,KAAKoB,MAAMC,MAAMW,OAAO,SAAAC,GAAI,OAAIA,EAAK3B,KAAOA,yCAIhDA,EAAII,GACX,IAAMwB,EAASlC,KAAKoB,MAAMC,MAAMW,OAAO,SAAAC,GAAI,OAAIA,EAAK3B,KAAOA,IAAI,GAE/D4B,EAAOxB,MAAQyB,SAASzB,GAEpB0B,MAAMF,EAAOxB,SACbwB,EAAOxB,MAAQ,GAGnBV,KAAK6B,SAAS,CACVR,MAAMN,OAAAe,EAAA,EAAAf,CAAKf,KAAKoB,MAAMC,MAAMW,OAAO,SAAAC,GAAI,OAAIA,EAAK3B,KAAOA,KAAlDyB,OAAA,CAAuDG,4EAQ3D,IAAAG,EAAArC,KAUL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEXH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,qCAZGkC,EAAKjB,MAAMC,MAAMiB,KAAK,SAACpC,EAAEqC,GAAH,OAAUrC,EAAEI,GAAKiC,EAAEjC,GAAM,EAAMiC,EAAEjC,GAAKJ,EAAEI,IAAO,EAAI,IAAIkC,IAAI,SAAAP,GAAI,OAAIhC,EAAAC,EAAAC,cAACsC,EAAD,CAC5FnC,GAAI2B,EAAK3B,GACToC,IAAKT,EAAK3B,GACVM,SAAUyB,EAAKZ,WACff,MAAOuB,EAAKvB,MACZH,SAAU8B,EAAKX,eAWfzB,EAAAC,EAAAC,cAAA,UAAQQ,QAASX,KAAKsB,SAAtB,8BArEET,cCME8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.94150eed.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Year extends Component {\n    render() {\n        return (\n            <div className=\"Year\">\n                {this.props.id + 1}. Jahr:{' '}\n                <input onChange={e => this.props.onChange(this.props.id, e.target.value)} value={this.props.value} />\n                <button onClick={() => this.props.onRemove(this.props.id)}>-</button>\n            </div>\n        );\n    }\n}\n\nexport default Year;\n","import React, {Component} from 'react';\n\nimport Year from './Year';\n\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            years: [{\n                value: 0,\n                id: 0\n            }]\n        };\n\n        this.addYear = this.addYear.bind(this);\n        this.removeYear = this.removeYear.bind(this);\n        this.updateYear = this.updateYear.bind(this);\n    }\n\n    addYear() {\n        const next = {\n            value: 0,\n            id: this.state.years[this.state.years.length - 1].id + 1\n        };\n\n        this.setState({\n            years: [...this.state.years, next]\n        });\n    }\n\n    removeYear(id) {\n        this.setState({\n            years: this.state.years.filter(year => year.id !== id)\n        });\n    }\n\n    updateYear(id, value) {\n        const before = this.state.years.filter(year => year.id === id)[0];\n\n        before.value = parseInt(value);\n\n        if (isNaN(before.value)) {\n            before.value = 0;\n        }\n\n        this.setState({\n            years: [...this.state.years.filter(year => year.id !== id), before]\n        });\n    }\n\n    calculate() {\n\n    }\n\n    render() {\n        const renderYears = () => {\n            return this.state.years.sort((a,b) => (a.id > b.id) ? 1 : ((b.id > a.id) ? -1 : 0)).map(year => <Year\n                id={year.id}\n                key={year.id}\n                onRemove={this.removeYear}\n                value={year.value}\n                onChange={this.updateYear} />)\n        };\n\n        return (\n            <div className=\"App\">\n\n                <h1>PrimCalq</h1>\n                <small>Prämienberechnung</small>\n\n                {renderYears()}\n\n                <button onClick={this.addYear}>Jahr hinzufügen</button>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}